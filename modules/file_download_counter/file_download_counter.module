<?php

/**
 * @file
 * Logs and displays content file_download_counter for a site.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function file_download_counter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.file_download_counter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The file_download_counter module shows you how often content is viewed. This is useful in determining which pages of your site are most popular. For more information, see the <a href=":file_download_counter_do">online documentation for the file_download_counter module</a>.', array(':file_download_counter_do' => 'https://www.drupal.org/documentation/modules/file_download_counter/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Displaying popular content') . '</dt>';
      $output .= '<dd>' . t('The module includes a <em>Popular content</em> block that displays the most viewed pages today and for all time, and the last content viewed. To use the block, enable <em>Count content views</em> on the <a href=":file_download_counter-settings">file_download_counter page</a>, and then you can enable and configure the block on the <a href=":blocks">Block layout page</a>.', array(':file_download_counter-settings' => \Drupal::url('file_download_counter.settings'), ':blocks' => (\Drupal::moduleHandler()->moduleExists('block')) ? \Drupal::url('block.admin_display') : '#')) . '</dd>';
      $output .= '<dt>' . t('Page view counter') . '</dt>';
      $output .= '<dd>' . t('The file_download_counter module includes a counter for each page that increases whenever the page is viewed. To use the counter, enable <em>Count content views</em> on the <a href=":file_download_counter-settings">file_download_counter page</a>, and set the necessary <a href=":permissions">permissions</a> (<em>View content hits</em>) so that the counter is visible to the users.', array(':file_download_counter-settings' => \Drupal::url('file_download_counter.settings'), ':permissions' => \Drupal::url('user.admin_permissions', array(), array('fragment' => 'module-file_download_counter')))) . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'file_download_counter.settings':
      return '<p>' . t('Settings for the statistical information that Drupal will keep about the site.') . '</p>';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
//function file_download_counter_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
//  if (!$node->isNew() && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
//    $build['#attached']['library'][] = 'file_download_counter/drupal.file_download_counter';
//    $settings = array('data' => array('nid' => $node->id()), 'url' => Url::fromUri('base:' . drupal_get_path('module', 'file_download_counter') . '/file_download_counter.php')->toString());
//    $build['#attached']['drupalSettings']['file_download_counter'] = $settings;
//  }
//}

/**
 * Implements hook_node_links_alter().
 */
//function file_download_counter_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
//  if ($context['view_mode'] != 'rss') {
//    $links['#cache']['contexts'][] = 'user.permissions';
//    if (\Drupal::currentUser()->hasPermission('view post access counter')) {
//      $file_download_counter = file_download_counter_get($entity->id());
//      if ($file_download_counter) {
//        $file_download_counter_links['file_download_counter_counter']['title'] = \Drupal::translation()->formatPlural($file_download_counter['totalcount'], '1 view', '@count views');
//        $links['file_download_counter'] = array(
//          '#theme' => 'links__node__file_download_counter',
//          '#links' => $file_download_counter_links,
//          '#attributes' => array('class' => array('links', 'inline')),
//        );
//      }
//      $links['#cache']['max-age'] = \Drupal::config('file_download_counter.settings')->get('display_max_age');
//    }
//  }
//}

/**
 * Implements hook_cron().
 */
function file_download_counter_cron() {
  $file_download_counter_timestamp = \Drupal::state()->get('file_download_counter.day_timestamp') ?: 0;

  if ((REQUEST_TIME - $file_download_counter_timestamp) >= 86400) {
    // Reset day counts.
    db_update('file_download_counter')
      ->fields(array('daycount' => 0))
      ->execute();
    \Drupal::state()->set('file_download_counter.day_timestamp', REQUEST_TIME);
  }

  // Calculate the maximum of node views, for node search ranking.
  \Drupal::state()->set('file_download_counter.node_counter_scale', 1.0 / max(1.0, db_query('SELECT MAX(totalcount) FROM {node_counter}')->fetchField()));
}

/**
 * Returns the most viewed content of all time, today, or the last-viewed node.
 *
 * @param string $dbfield
 *   The database field to use, one of:
 *   - 'totalcount': Integer that shows the top viewed content of all time.
 *   - 'daycount': Integer that shows the top viewed content for today.
 *   - 'timestamp': Integer that shows only the last viewed node.
 * @param int $dbrows
 *   The number of rows to be returned.
 *
 * @return SelectQuery|false
 *   A query result containing the node ID, title, user ID that owns the node,
 *   and the username for the selected node(s), or FALSE if the query could not
 *   be executed correctly.
 */
function file_download_counter_title_list($dbfield, $dbrows) {
  if (in_array($dbfield, array('totalcount', 'daycount', 'timestamp'))) {
    $query = db_select('file_managed', 'f');
    $query->join('file_usage', 'us', 'us.fid = f.fid');
    $query->join('file_download_counter', 'c', 'f.fid = c.fid');
    $query->join('node_field_revision', 'nr', 'us.id = nr.nid');
    $query->join('users_field_data', 'u', 'nr.uid = u.uid');

    $query->addField('nr', 'nid', 'nid');
    $query->addField('nr', 'title', 'title');
    $query->addField('u', 'uid', 'uid');
    $query->addField('u', 'name', 'name');
    $query->condition($dbfield, 0, '<>');
    $query->condition('nr.status', 1);
    $query->condition('nr.default_langcode', 1);
    return $query->condition('u.default_langcode', 1)
    ->orderBy($dbfield, 'DESC')
    ->range(0, $dbrows)
    ->execute();
  }
  return FALSE;
}


/**
 * Retrieves a node's "view file_download_counter".
 *
 * @param int $nid
 *   The node ID.
 *
 * @return array
 *   An associative array containing:
 *   - totalcount: Integer for the total number of times the node has been
 *     viewed.
 *   - daycount: Integer for the total number of times the node has been viewed
 *     "today". For the daycount to be reset, cron must be enabled.
 *   - timestamp: Integer for the timestamp of when the node was last viewed.
 */
function file_download_counter_get($fid) {

  if ($fid > 0) {
    // Retrieve an array with both totalcount and daycount.
    return db_query('SELECT totalcount, daycount, timestamp FROM {file_download_counter} WHERE nid = :fid',
      array(':fid' => $fid), array('target' => 'replica'))->fetchAssoc();
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for node entities.
 */

function file_download_counter_file_predelete(EntityInterface $file) {
  // Clean up file_download_counter table when node is deleted.
  db_delete('file_download_counter')
    ->condition('fid', $file->id())
    ->execute();
}

/**
 * Implements hook_ranking().
 */
function file_download_counter_ranking() {
  if (\Drupal::config('file_download_counter.settings')->get('count_content_views')) {
    return array(
      'views' => array(
        'title' => t('Number of downloads'),
        'join' => array(
          'type' => 'LEFT',
          'table' => 'file_download_counter',
          'alias' => 'file_download_counter',
          'on' => 'file_download_counter.fid = i.fid',
        ),
        // Inverse law that maps the highest view count on the site to 1 and 0
        // to 0. Note that the ROUND here is necessary for PostgreSQL and SQLite
        // in order to ensure that the :file_download_counter_scale argument is treated as
        // a numeric type, because the PostgreSQL PDO driver sometimes puts
        // values in as strings instead of numbers in complex expressions like
        // this.
        'score' => '2.0 - 2.0 / (1.0 + node_counter.totalcount * (ROUND(:file_download_counter_scale, 4)))',
        'arguments' => array(':file_download_counter_scale' => \Drupal::state()->get('file_download_counter.node_counter_scale') ?: 0),
      ),
    );
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function file_download_counter_preprocess_block(&$variables) {
  if ($variables['configuration']['provider'] == 'file_download_counter') {
    $variables['attributes']['role'] = 'navigation';
  }
}

/**
 * Implements hook_block_alter().
 *
 * Removes the "popular" block from display if the module is not configured
 * to count content views.
 */
function file_download_counter_block_alter(&$definitions) {
  $file_download_counter_count_content_views = \Drupal::config('file_download_counter.settings')->get('count_content_views');
  if (empty($file_download_counter_count_content_views)) {
    unset($definitions['file_download_counter_popular_block']);
  }
}

/**
 * Public function to increment file counter against fid
 *
 * @param $fid
 */
function file_download_counter_increment_file($fid) {
  \Drupal::database()->merge('file_download_counter')
    ->key('fid', $fid)
    ->fields(array(
      'daycount' => 1,
      'totalcount' => 1,
      'timestamp' => REQUEST_TIME,
    ))
    ->expression('daycount', 'daycount + 1')
    ->expression('totalcount', 'totalcount + 1')
    ->execute();
}
